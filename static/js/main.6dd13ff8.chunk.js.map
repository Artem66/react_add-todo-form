{"version":3,"sources":["api/users.ts","api/todos.ts","components/UserInfo/UserInfo.tsx","components/TodoInfo/TodoInfo.tsx","components/TodoList/TodoList.tsx","App.tsx","index.tsx"],"names":["id","name","username","email","title","completed","userId","UserInfo","user","className","href","TodoInfo","todo","classNames","usersFromServer","find","user1","TodoList","todos","map","App","useState","setToDo","selectedNameId","setSelectedNameId","todosFromServer","todosList","setTodoList","isTitleEmpty","setIsTitleEmpty","isSelectEmpty","setIsSelectEmpty","todoId","setTodoId","action","method","onSubmit","event","preventDefault","htmlFor","type","value","onChange","target","length","placeholder","disabled","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.6dd13ff8.chunk.js","sourcesContent":["export default [\n  {\n    id: 1,\n    name: 'Leanne Graham',\n    username: 'Bret',\n    email: 'Sincere@april.biz',\n  },\n  {\n    id: 2,\n    name: 'Ervin Howell',\n    username: 'Antonette',\n    email: 'Shanna@melissa.tv',\n  },\n  {\n    id: 3,\n    name: 'Clementine Bauch',\n    username: 'Samantha',\n    email: 'Nathan@yesenia.net',\n  },\n  {\n    id: 4,\n    name: 'Patricia Lebsack',\n    username: 'Karianne',\n    email: 'Julianne.OConner@kory.org',\n  },\n  {\n    id: 5,\n    name: 'Chelsey Dietrich',\n    username: 'Kamren',\n    email: 'Lucio_Hettinger@annie.ca',\n  },\n  {\n    id: 6,\n    name: 'Mrs. Dennis Schulist',\n    username: 'Leopoldo_Corkery',\n    email: 'Karley_Dach@jasper.info',\n  },\n  {\n    id: 7,\n    name: 'Kurtis Weissnat',\n    username: 'Elwyn.Skiles',\n    email: 'Telly.Hoeger@billy.biz',\n  },\n  {\n    id: 8,\n    name: 'Nicholas Runolfsdottir V',\n    username: 'Maxime_Nienow',\n    email: 'Sherwood@rosamond.me',\n  },\n  {\n    id: 9,\n    name: 'Glenna Reichert',\n    username: 'Delphine',\n    email: 'Chaim_McDermott@dana.io',\n  },\n  {\n    id: 10,\n    name: 'Clementina DuBuque',\n    username: 'Moriah.Stanton',\n    email: 'Rey.Padberg@karina.biz',\n  },\n];\n","export default [\n  {\n    id: 1,\n    title: 'delectus aut autem',\n    completed: true,\n    userId: 1,\n  },\n  {\n    id: 15,\n    title: 'some other todo',\n    completed: false,\n    userId: 1,\n  },\n  {\n    id: 2,\n    title: 'quis ut nam facilis et officia qui',\n    completed: false,\n    userId: 4,\n  },\n];\n","interface Users {\n  id?: number;\n  name?: string;\n  username?: string;\n  email?: string;\n}\n\ntype Props = {\n  user?: Users;\n};\n\nexport const UserInfo: React.FC<Props> = ({ user }) => {\n  return (\n    <a className=\"UserInfo\" href={`mailto:${user?.email}`}>\n      {user?.name}\n    </a>\n  );\n};\n","import classNames from 'classnames';\nimport { UserInfo } from '../UserInfo';\nimport usersFromServer from '../../api/users';\n\ninterface TodosList {\n  id: number;\n  title: string;\n  completed: boolean;\n  userId: number;\n}\n\ntype Props = {\n  todo: TodosList;\n};\n\nexport const TodoInfo: React.FC<Props> = ({ todo }) => {\n  const found = (userId: number) => {\n    return usersFromServer.find(user1 => user1.id === userId);\n  };\n\n  return (\n    <article\n      data-id={todo.id}\n      className={classNames('TodoInfo',\n        {\n          'TodoInfo--completed': todo.completed,\n        })}\n    >\n      <h2 className=\"TodoInfo__title\">\n        {todo.title}\n      </h2>\n      <UserInfo user={found(todo.userId)} />\n    </article>\n  );\n};\n","import { TodoInfo } from '../TodoInfo';\n\ninterface TodosList {\n  id: number;\n  title: string;\n  completed: boolean;\n  userId: number;\n}\n\ntype Props = {\n  todos: TodosList[];\n};\n\nexport const TodoList: React.FC<Props> = ({ todos }) => {\n  return (\n    <section className=\"TodoList\">\n      {todos.map((todo) => (\n        <TodoInfo\n          todo={todo}\n          key={todo.id}\n        />\n      ))}\n    </section>\n  );\n};\n","import './App.scss';\nimport { useState } from 'react';\n\nimport usersFromServer from './api/users';\nimport todosFromServer from './api/todos';\nimport { TodoList } from './components/TodoList';\n\n// interface TodosList {\n//   id: number;\n//   title: string;\n//   completed: boolean;\n//   userId: number;\n// }\n\n// interface User {\n//   id: number;\n//   name: string;\n//   username: string;\n//   email: string;\n// }\n\n// type Props = {\n//   usersFromServer: 0;\n// };\n\nexport const App: React.FC = () => {\n  const [todo, setToDo] = useState('');\n  const [selectedNameId, setSelectedNameId] = useState(0);\n  const [todosList, setTodoList] = useState([...todosFromServer]);\n  const [isTitleEmpty, setIsTitleEmpty] = useState(false);\n  const [isSelectEmpty, setIsSelectEmpty] = useState(false);\n  const [todoId, setTodoId] = useState(15);\n\n  const handleChange = (event: React.FormEvent<HTMLInputElement>) => {\n    setToDo((event.target as HTMLInputElement).value);\n\n    if ((event.target as HTMLInputElement).value.length > 0) {\n      setIsTitleEmpty(false);\n    } else {\n      setIsTitleEmpty(true);\n    }\n  };\n\n  const handleChangeSlect = (\n    event: React.ChangeEvent<HTMLSelectElement>,\n  ) => {\n    setSelectedNameId(+event.target.value);\n\n    if ((+event.target.value) > 0) {\n      setIsSelectEmpty(false);\n    }\n  };\n\n  const handleSubmit = (event: React.FormEvent) => {\n    event.preventDefault();\n\n    if (todo !== '' && selectedNameId > 0) {\n      setTodoList([...todosList, {\n        id: todoId + 1,\n        title: todo,\n        completed: false,\n        userId: +selectedNameId,\n      }]);\n      setTodoId(todoId + 1);\n      setToDo('');\n      setSelectedNameId(0);\n    }\n\n    if (+selectedNameId > 0) {\n      setIsSelectEmpty(false);\n    }\n\n    if (+selectedNameId <= 0) {\n      setIsSelectEmpty(true);\n    }\n\n    if (todo === '') {\n      setIsTitleEmpty(true);\n    }\n  };\n\n  return (\n    <div className=\"App\">\n      <h1>Add todo form</h1>\n\n      <form\n        action=\"/api/users\"\n        method=\"POST\"\n        onSubmit={handleSubmit}\n      >\n        <div className=\"field\">\n          <label htmlFor=\"title\">Title: </label>\n          <input\n            type=\"text\"\n            name=\"title\"\n            data-cy=\"titleInput\"\n            value={todo}\n            onChange={handleChange}\n            placeholder=\"Enter a title\"\n          />\n\n          {isTitleEmpty\n            ? <span className=\"error\">Please enter a title</span>\n            : null}\n        </div>\n\n        <div className=\"field\">\n          <label htmlFor=\"usernames\">User: </label>\n          <select\n            data-cy=\"userSelect\"\n            value={selectedNameId}\n            onChange={handleChangeSlect}\n            name=\"usernames\"\n          >\n            <option value=\"0\" disabled>Choose a user</option>\n            {usersFromServer.map(user => (\n              <option value={user.id} key={user.id}>{user.name}</option>\n            ))}\n          </select>\n\n          {isSelectEmpty\n            ? <span className=\"error\">Please choose a user</span>\n            : null}\n        </div>\n\n        <button type=\"submit\" data-cy=\"submitButton\">\n          Add\n        </button>\n      </form>\n      <TodoList todos={todosList} />\n    </div>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}